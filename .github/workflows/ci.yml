name: Python CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build_and_test:
    # Use a matrix strategy that includes Python 3.11/3.12 to support newer dependencies like ipython==9.0.2
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
        # The runner.os needs to be included here if you want to test on both Linux and Windows
        # runner-os: [ubuntu-latest, windows-latest]

    # Use the default Linux runner for general CI/CD
    runs-on: ubuntu-latest # Or use ${{ matrix.runner-os }} if testing multiple OS

    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4

      - name: üêç Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: ‚öôÔ∏è Install dependencies (Linux/Base)
        # We explicitly set the shell for the conditional check
        shell: bash 
        run: |
          python -m pip install --upgrade pip
          
          # Install base dependencies from the specified sub-directory
          pip install -r dms-backend/requirements.txt
          
          # Install gunicorn for production-like environment check
          pip install gunicorn

      - name: ‚öôÔ∏è Install Windows-only dependencies
        # This step only runs if the runner is Windows (to handle pywin32, etc.)
        if: runner.os == 'Windows'
        # The "shell: bash" line has been moved correctly under the "run" block in the original step.
        # However, to avoid mixing OS-specific logic, it's cleaner to separate the steps and use 'if'.
        runs-on: windows-latest # Override the job's runs-on if you want to run this step
        shell: powershell # Windows needs powershell or cmd
        run: |
          Write-Host "Installing Windows-specific dependencies..."
          pip install -r dms-backend/requirements-windows.txt
          
      - name: üßπ Lint code with Black
        run: |
          pip install black
          # This checks files for formatting issues without modifying them
          black --check .
      
      - name: üß™ Run tests with pytest
        run: |
          pip install pytest
          # Replace 'pytest' with your actual test command
          # pytest
